name: On-demand load test

on:
  workflow_dispatch:
    inputs:
      repository:
        required: true
        description: repository to test
        type: string
        default: 'openfga/openfga'
      ref:
        required: true
        description: SHA or branch name to test
        type: string
        default: 'main'
      N:
        required: true
        description: large N will generate more tuples
        type: number
        default: 1
      M:
        required: true
        description: large M implies a single user has a relationship with multiple objects
        type: number
        default: 1
      K:
        required: true
        description: large K implies a single object has a relationship with multiple users
        type: number
        default: 1
      testCase:
        required: true
        description: the test case to run (see https://github.com/openfga/benchmarks)
        type: choice
        options:
          - 1
          - 2
          - 3
          - 4
          - 5a
          - 5b
          - 6
          - 7
          - 8

# needed for aws-actions/configure-aws-credentials. See https://github.com/aws-actions/configure-aws-credentials/issues/271
permissions:
  id-token: write
  contents: read

jobs:
  create-config-map:
    runs-on: ubuntu-latest
    environment: AWSLoadTest
    steps:
      - name: Checkout benchmarks repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: openfga/benchmarks
          token: ${{ secrets.PAT_TOKEN_TO_CLONE_BENCHMARKS }}
          fetch-depth: 2
      - name: Install Node
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version: "lts/gallium"
      - name: Build benchmarks
        run: npm install . && npm run-script webpack
      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set Kubernetes context
        uses: koslib/helm-eks-action@4d7c0adee70fd51aee3eea1274599aca9cca7fe0 # april 5, 2023
        with:
          command: |
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.OPENFGA_EKS_CLUSTER }} --role-arn ${{ secrets.AWS_IAM_ROLE }} --kubeconfig ./kubeconfig
            echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
            echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            kubectl config set-context arn:aws:eks:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT }}:cluster/${{ secrets.OPENFGA_EKS_CLUSTER }}
      - name: Delete existing Kubernetes configmap
        uses: koslib/helm-eks-action@4d7c0adee70fd51aee3eea1274599aca9cca7fe0 # april 5, 2023
        continue-on-error: true
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: |
            kubectl delete configmap openfga-benchmark-script
      - name: Create Kubernetes configmap
        uses: koslib/helm-eks-action@4d7c0adee70fd51aee3eea1274599aca9cca7fe0 # april 5, 2023
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: |
            kubectl create configmap openfga-benchmark-script --from-file ./build
  upload-code-to-ecr:
    runs-on: ubuntu-latest
    environment: AWSLoadTest
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.2
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}

      - name: Set variables
        id: vars
        run: echo "sha_short=$(git rev-parse --short=8 ${{ github.event.inputs.ref }})" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.9.1

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ${{ secrets.OPENFGA_REGISTRY }}

      - name: Build, tag, and push image to AWS ECR
        timeout-minutes: 10
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4.1.1
        with:
          context: .
          push: true
          tags: ${{ secrets.OPENFGA_ECR_URI }}:${{ steps.vars.outputs.sha_short }}

  run-load-test:
    runs-on: ubuntu-latest
    needs: [create-config-map, upload-code-to-ecr]
    environment: AWSLoadTest
    steps:
      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: helm setup
        uses: koslib/helm-eks-action@4d7c0adee70fd51aee3eea1274599aca9cca7fe0 # april 5, 2023
        with:
          command: |
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.OPENFGA_EKS_CLUSTER }} --role-arn ${{ secrets.AWS_IAM_ROLE }} --kubeconfig ./kubeconfig
            echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
            echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            kubectl config set-context arn:aws:eks:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT }}:cluster/${{ secrets.OPENFGA_EKS_CLUSTER }}
            kubectl config get-contexts
# RUN MANUALLY:
#            eksctl create iamidentitymapping \
#              --cluster ${{ secrets.OPENFGA_EKS_CLUSTER }} \
#              --region ${{ secrets.AWS_REGION }} \
#              --arn ${{ secrets.AWS_IAM_ROLE }} \
#              --group system:masters \
#              --no-duplicate-arns \
#              --username github-action

      - name: helm deploy
        uses: koslib/helm-eks-action@4d7c0adee70fd51aee3eea1274599aca9cca7fe0 # april 5, 2023
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: |
            helm repo add openfga https://openfga.github.io/helm-charts
            helm repo update
            helm upgrade --install openfgabench-${{ needs.upload-code-to-ecr.outputs.sha_short  }} openfga/benchmark \
              --set Nparam=${{ github.event.inputs.N }} \
              --set Mparam=${{ github.event.inputs.M }} \
              --set Kparam=${{ github.event.inputs.K }} \
              --set testListObject=true \
              --set testCheck=true \
              --set testCase=${{ github.event.inputs.testCase }} \
              --set replicaCount=1 \
              --set k6.projectID=${{ secrets.K6_PROJECT_ID}} \
              --set image.repository=${{ secrets.OPENFGA_ECR_URI }} \
              --set image.tag=openfgabench-${{ needs.upload-code-to-ecr.outputs.sha_short }} \
              --set datastore.engine=postgres \
              --set datastore.uri="postgres://postgres:password@openfga-postgresql.default.svc.cluster.local:5432/postgres?sslmode=disable" \
              --set postgres.enabled=true \
              --set postgresql.auth.postgresPassword=password \
              --set postgresql.auth.database=postgres \
              --set postgresql.primary.resources.requests.memory=2Gi,postgresql.primary.resources.requests.cpu=1.0 \
              --set openfga.resources.requests.memory=1Gi,openfga.resources.requests.cpu=500m \
              --set resources.requests.memory=1Gi,resources.limits.memory=2Gi

      - name: wait
        uses: koslib/helm-eks-action@4d7c0adee70fd51aee3eea1274599aca9cca7fe0 # april 5, 2023
        timeout-minutes: 60
        with:
          command: |
            kubectl wait --timeout=1h --for=jsonpath='{.status.phase}'=Succeeded pod/openfgabench-${{ needs.upload-code-to-ecr.outputs.sha_short }}-benchmark-benchrunner

      - name: helm destroy
        uses: koslib/helm-eks-action@4d7c0adee70fd51aee3eea1274599aca9cca7fe0 # april 5, 2023
        with:
          command: |
            helm uninstall openfgabench-${{ needs.upload-code-to-ecr.outputs.sha_short }}
            kubectl delete pvc -l app.kubernetes.io/instance=openfgabench-${{ needs.upload-code-to-ecr.outputs.sha_short }}
